#Resposta 1
Pergunta: Para as questões 2 a 5, considere que as variáveis f, g, h, i e j são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor A[] é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores: f: R4 g: R5 h: R6 i: R7 j: R8 A: R9 Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.
Escreva os trechos de código assembly do MSP430 para: 

(a) Somente setar o bit menos significativo de R5.
  bis.w BIT0,R5
  
(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo. 
   bis.w BIT0,R6
   bis.w BIT1,R6
   
(c) Somente zerar o terceiro bit menos significativo de R7.
   bic.w BIT2,R7
   
(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.
   bic.w BIT2,R8
   bic.w BIT3,R8
   
(e) Somente inverter o bit mais significativo de R9. 
   inv.w BITF,R9
   
(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10.
   inv.w #0xF000,R10
   bis.w #0xF,R10
   
#Resposta 2
Pergunta: "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

if(i>j) f = g+h+10;
else f = g-h-10;

    cmp R7,R8		
 jne ELSE	
    
	  mov.w R5,R4				
	  add.w R6,R4		
	  add.w #10, R4
    
jmp EXIT
	
	ELSE: 
    mov.w R5,R4		
	  sub.w R6,R4		
	  sub.w #10,R4	
	
	EXIT:

#Resposta 3
Pergunta: "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	while(save[i]!=k) i++;

loop :  
  mov.w R7, R12
	rla R12  
	add.w R10,R12
	cmp 0(R12),R9
  
	jeq EXIT
  
	inc.w R7
	jmp loop
  
EXIT:  	ret

#Resposta 4
Pergunta: "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
for(i=0; i<100; i++) A[i] = i*2;

	LOOP:
      mov.w R7,R12 		
      rla R12 		
      mov R12,R13 		
      add.w R9,R12 	
      mov.w R13,0(R12) 	
      inc.w R7
      cmp #100,R7
      jl LOOP

#Resposta 5
Pergunta: "Traduza" o seguinte trecho de código em C para o assembly do MSP430:
for(i=99; i>=0; i--) A[i] = i*2;

mov.w #99, R14
loop: 	

  mov.w R7,R12
	rla R12
	mov.w R12,R13
	add.w R9,R12
	mov.w R13, O(R12)
  
	cmp R7,R14
  
	jeq EXIT 
  
	dec.w R7
	jmp loop
  
EXIT: 	ret
